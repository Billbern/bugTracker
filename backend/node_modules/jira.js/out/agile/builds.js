"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Builds = void 0;
const tslib_1 = require("tslib");
class Builds {
    constructor(client) {
        this.client = client;
    }
    submitBuilds(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/builds/0.1/bulk',
                method: 'POST',
                data: {
                    properties: parameters === null || parameters === void 0 ? void 0 : parameters.properties,
                    builds: parameters === null || parameters === void 0 ? void 0 : parameters.builds,
                    providerMetadata: parameters === null || parameters === void 0 ? void 0 : parameters.providerMetadata,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteBuildsByProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/builds/0.1/bulkByProperties',
                method: 'DELETE',
                params: {
                    _updateSequenceNumber: (parameters === null || parameters === void 0 ? void 0 : parameters._updateSequenceNumber) || (parameters === null || parameters === void 0 ? void 0 : parameters.updateSequenceNumber),
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getBuildByKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/builds/0.1/pipelines/${parameters.pipelineId}/builds/${parameters.buildNumber}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteBuildByKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/builds/0.1/pipelines/${parameters.pipelineId}/builds/${parameters.buildNumber}`,
                method: 'DELETE',
                params: {
                    _updateSequenceNumber: parameters._updateSequenceNumber || parameters.updateSequenceNumber,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Builds = Builds;
//# sourceMappingURL=builds.js.map