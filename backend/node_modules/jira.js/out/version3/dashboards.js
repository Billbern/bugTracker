"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dashboards = void 0;
const tslib_1 = require("tslib");
class Dashboards {
    constructor(client) {
        this.client = client;
    }
    getAllDashboards(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/dashboard',
                method: 'GET',
                params: {
                    filter: parameters === null || parameters === void 0 ? void 0 : parameters.filter,
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createDashboard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/dashboard',
                method: 'POST',
                data: {
                    name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
                    description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
                    sharePermissions: parameters === null || parameters === void 0 ? void 0 : parameters.sharePermissions,
                    editPermissions: parameters === null || parameters === void 0 ? void 0 : parameters.editPermissions,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAllAvailableDashboardGadgets(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/dashboard/gadgets',
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getDashboardsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/dashboard/search',
                method: 'GET',
                params: {
                    dashboardName: parameters === null || parameters === void 0 ? void 0 : parameters.dashboardName,
                    accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
                    owner: parameters === null || parameters === void 0 ? void 0 : parameters.owner,
                    groupname: parameters === null || parameters === void 0 ? void 0 : parameters.groupname,
                    groupId: parameters === null || parameters === void 0 ? void 0 : parameters.groupId,
                    projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
                    orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    status: parameters === null || parameters === void 0 ? void 0 : parameters.status,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAllGadgets(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/dashboard/${parameters.dashboardId}/gadget`,
                method: 'GET',
                params: {
                    moduleKey: parameters.moduleKey,
                    uri: parameters.uri,
                    gadgetId: parameters.gadgetId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addGadget(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/dashboard/${parameters.dashboardId}/gadget`,
                method: 'POST',
                data: {
                    moduleKey: parameters.moduleKey,
                    uri: parameters.uri,
                    color: parameters.color,
                    position: parameters.position,
                    title: parameters.title,
                    ignoreUriAndModuleKeyValidation: parameters.ignoreUriAndModuleKeyValidation,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateGadget(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/dashboard/${parameters.dashboardId}/gadget/${parameters.gadgetId}`,
                method: 'PUT',
                data: {
                    title: parameters.title,
                    color: parameters.color,
                    position: parameters.position,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeGadget(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/dashboard/${parameters.dashboardId}/gadget/${parameters.gadgetId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getDashboardItemPropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/dashboard/${parameters.dashboardId}/items/${parameters.itemId}/properties`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getDashboardItemProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/dashboard/${parameters.dashboardId}/items/${parameters.itemId}/properties/${parameters.propertyKey}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setDashboardItemProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/dashboard/${parameters.dashboardId}/items/${parameters.itemId}/properties/${parameters.propertyKey}`,
                method: 'PUT',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteDashboardItemProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/dashboard/${parameters.dashboardId}/items/${parameters.itemId}/properties/${parameters.propertyKey}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getDashboard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/dashboard/${parameters.id}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateDashboard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/dashboard/${parameters.id}`,
                method: 'PUT',
                data: {
                    name: parameters.name,
                    description: parameters.description,
                    sharePermissions: parameters.sharePermissions,
                    editPermissions: parameters.editPermissions,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteDashboard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/dashboard/${parameters.id}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    copyDashboard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/dashboard/${parameters.id}/copy`,
                method: 'POST',
                data: {
                    name: parameters.name,
                    description: parameters.description,
                    sharePermissions: parameters.sharePermissions,
                    editPermissions: parameters.editPermissions,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Dashboards = Dashboards;
//# sourceMappingURL=dashboards.js.map