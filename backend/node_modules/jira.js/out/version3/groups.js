"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Groups = void 0;
const tslib_1 = require("tslib");
class Groups {
    constructor(client) {
        this.client = client;
    }
    getGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/group',
                method: 'GET',
                params: {
                    groupname: parameters.groupname,
                    groupId: parameters.groupId,
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/group',
                method: 'POST',
                data: parameters,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/group',
                method: 'DELETE',
                params: {
                    groupname: parameters.groupname,
                    groupId: parameters.groupId,
                    swapGroup: parameters.swapGroup,
                    swapGroupId: parameters.swapGroupId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    bulkGetGroups(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/group/bulk',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    groupId: parameters === null || parameters === void 0 ? void 0 : parameters.groupId,
                    groupName: parameters === null || parameters === void 0 ? void 0 : parameters.groupName,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getUsersFromGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/group/member',
                method: 'GET',
                params: {
                    groupname: parameters.groupname,
                    groupId: parameters.groupId,
                    includeInactiveUsers: parameters.includeInactiveUsers,
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addUserToGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/group/user',
                method: 'POST',
                params: {
                    groupname: parameters.groupname,
                    groupId: parameters.groupId,
                },
                data: {
                    name: parameters.name,
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeUserFromGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/group/user',
                method: 'DELETE',
                params: {
                    groupname: parameters.groupname,
                    groupId: parameters.groupId,
                    username: parameters.username,
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    findGroups(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/groups/picker',
                method: 'GET',
                params: {
                    accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
                    query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
                    exclude: parameters === null || parameters === void 0 ? void 0 : parameters.exclude,
                    excludeId: parameters === null || parameters === void 0 ? void 0 : parameters.excludeId,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    userName: parameters === null || parameters === void 0 ? void 0 : parameters.userName,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Groups = Groups;
//# sourceMappingURL=groups.js.map