import * as Models from './models';
import * as Parameters from './parameters';
import { Callback } from '../callback';
import { Client } from '../clients';
export declare class WorkflowStatuses {
    private client;
    constructor(client: Client);
    /**
     * Returns a list of all statuses associated with active workflows.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:** None.
     */
    getStatuses<T = Models.StatusDetails[]>(callback: Callback<T>): Promise<void>;
    /**
     * Returns a list of all statuses associated with active workflows.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:** None.
     */
    getStatuses<T = Models.StatusDetails[]>(callback?: never): Promise<T>;
    /**
     * Returns a status. The status must be associated with an active workflow to be returned.
     *
     * If a name is used on more than one status, only the status found first is returned. Therefore, identifying the
     * status by its ID may be preferable.
     *
     * This operation can be accessed anonymously.
     *
     * [Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required: None.
     */
    getStatus<T = Models.StatusDetails>(parameters: Parameters.GetStatus, callback: Callback<T>): Promise<void>;
    /**
     * Returns a status. The status must be associated with an active workflow to be returned.
     *
     * If a name is used on more than one status, only the status found first is returned. Therefore, identifying the
     * status by its ID may be preferable.
     *
     * This operation can be accessed anonymously.
     *
     * [Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required: None.
     */
    getStatus<T = Models.StatusDetails>(parameters: Parameters.GetStatus, callback?: never): Promise<T>;
}
