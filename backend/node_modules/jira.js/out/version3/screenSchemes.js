"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScreenSchemes = void 0;
const tslib_1 = require("tslib");
class ScreenSchemes {
    constructor(client) {
        this.client = client;
    }
    getScreenSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/screenscheme',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
                    orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/screenscheme',
                method: 'POST',
                data: {
                    name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
                    description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
                    screens: parameters === null || parameters === void 0 ? void 0 : parameters.screens,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/screenscheme/${parameters.screenSchemeId}`,
                method: 'PUT',
                data: {
                    name: parameters.name,
                    description: parameters.description,
                    screens: parameters.screens,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/screenscheme/${parameters.screenSchemeId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.ScreenSchemes = ScreenSchemes;
//# sourceMappingURL=screenSchemes.js.map