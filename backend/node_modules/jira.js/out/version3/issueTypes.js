"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueTypes = void 0;
const tslib_1 = require("tslib");
class IssueTypes {
    constructor(client) {
        this.client = client;
    }
    getIssueAllTypes(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuetype',
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuetype',
                method: 'POST',
                data: {
                    name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
                    description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
                    type: parameters === null || parameters === void 0 ? void 0 : parameters.type,
                    hierarchyLevel: parameters === null || parameters === void 0 ? void 0 : parameters.hierarchyLevel,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIssueTypesForProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuetype/project',
                method: 'GET',
                params: {
                    projectId: parameters.projectId,
                    level: parameters.level,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuetype/${parameters.id}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuetype/${parameters.id}`,
                method: 'PUT',
                data: {
                    name: parameters.name,
                    description: parameters.description,
                    avatarId: parameters.avatarId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuetype/${parameters.id}`,
                method: 'DELETE',
                params: {
                    alternativeIssueTypeId: parameters.alternativeIssueTypeId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAlternativeIssueTypes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuetype/${parameters.id}/alternatives`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createIssueTypeAvatar(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuetype/${parameters.id}/avatar2`,
                method: 'POST',
                params: {
                    x: parameters.x,
                    y: parameters.y,
                    size: parameters.size,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssueTypes = IssueTypes;
//# sourceMappingURL=issueTypes.js.map