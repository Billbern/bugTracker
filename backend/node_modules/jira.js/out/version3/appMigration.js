"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppMigration = void 0;
const tslib_1 = require("tslib");
class AppMigration {
    constructor(client) {
        this.client = client;
    }
    updateIssueFields(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/atlassian-connect/1/migration/field',
                method: 'PUT',
                headers: {
                    'Atlassian-Transfer-Id': parameters.transferId,
                    'Atlassian-Account-Id': parameters.accountId,
                },
                data: {
                    updateValueList: parameters.updateValueList,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateEntityPropertiesValue(parameters, callback) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/atlassian-connect/1/migration/properties/${parameters.entityType}`,
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Atlassian-Transfer-Id': parameters.transferId,
                    'Atlassian-Account-Id': parameters.accountId,
                },
                data: (_a = parameters.body) !== null && _a !== void 0 ? _a : parameters.entities,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    workflowRuleSearch(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/atlassian-connect/1/migration/workflow/rule/search',
                method: 'POST',
                headers: {
                    'Atlassian-Transfer-Id': parameters.transferId,
                },
                data: {
                    workflowEntityId: parameters.workflowEntityId,
                    ruleIds: parameters.ruleIds,
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.AppMigration = AppMigration;
//# sourceMappingURL=appMigration.js.map