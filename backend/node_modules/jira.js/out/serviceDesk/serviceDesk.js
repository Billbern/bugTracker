"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceDesk = void 0;
const tslib_1 = require("tslib");
const FormData = require("form-data");
class ServiceDesk {
    constructor(client) {
        this.client = client;
    }
    getServiceDesks(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/servicedeskapi/servicedesk',
                method: 'GET',
                params: {
                    start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
                    limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getServiceDeskById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    attachTemporaryFile(parameters, callback) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const formData = new FormData();
            const attachments = Array.isArray(parameters.attachment) ? parameters.attachment : [parameters.attachment];
            attachments.forEach(attachment => formData.append('file', attachment.file, attachment.filename));
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/attachTemporaryFile`,
                method: 'POST',
                headers: Object.assign({ 'X-Atlassian-Token': 'no-check', 'Content-Type': 'multipart/form-data' }, (_a = formData.getHeaders) === null || _a === void 0 ? void 0 : _a.call(formData)),
                data: formData,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getCustomers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/customer`,
                method: 'GET',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
                params: {
                    query: parameters.query,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addCustomers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/customer`,
                method: 'POST',
                data: {
                    usernames: parameters.usernames,
                    accountIds: parameters.accountIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeCustomers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/customer`,
                method: 'DELETE',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
                data: {
                    usernames: parameters.usernames,
                    accountIds: parameters.accountIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getArticles(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/knowledgebase/article`,
                method: 'GET',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
                params: {
                    query: parameters.query,
                    highlight: parameters.highlight,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getQueues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/queue`,
                method: 'GET',
                params: {
                    includeCount: parameters.includeCount,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getQueue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/queue/${parameters.queueId}`,
                method: 'GET',
                params: {
                    includeCount: parameters.includeCount,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIssuesInQueue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/queue/${parameters.queueId}/issue`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRequestTypes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype`,
                method: 'GET',
                params: {
                    groupId: parameters.groupId,
                    expand: parameters.expand,
                    searchQuery: parameters.searchQuery,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createRequestType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype`,
                method: 'POST',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
                data: {
                    issueTypeId: parameters.issueTypeId,
                    name: parameters.name,
                    description: parameters.description,
                    helpText: parameters.helpText,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRequestTypeById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteRequestType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}`,
                method: 'DELETE',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRequestTypeFields(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}/field`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getPropertiesKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}/property`,
                method: 'GET',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}/property/${parameters.propertyKey}`,
                method: 'GET',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}/property/${parameters.propertyKey}`,
                method: 'PUT',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}/property/${parameters.propertyKey}`,
                method: 'DELETE',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRequestTypeGroups(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttypegroup`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.ServiceDesk = ServiceDesk;
//# sourceMappingURL=serviceDesk.js.map