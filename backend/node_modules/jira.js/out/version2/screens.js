"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Screens = void 0;
const tslib_1 = require("tslib");
class Screens {
    constructor(client) {
        this.client = client;
    }
    getScreensForField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/field/${parameters.fieldId}/screens`,
                method: 'GET',
                params: {
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getScreens(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/screens',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
                    queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
                    scope: parameters === null || parameters === void 0 ? void 0 : parameters.scope,
                    orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createScreen(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/screens',
                method: 'POST',
                data: {
                    name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
                    description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addFieldToDefaultScreen(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/screens/addToDefault/${parameters.fieldId}`,
                method: 'POST',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateScreen(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/screens/${parameters.screenId}`,
                method: 'PUT',
                data: {
                    name: parameters.name,
                    description: parameters.description,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteScreen(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/screens/${parameters.screenId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAvailableScreenFields(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/screens/${parameters.screenId}/availableFields`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Screens = Screens;
//# sourceMappingURL=screens.js.map