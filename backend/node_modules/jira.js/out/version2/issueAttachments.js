"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueAttachments = void 0;
const tslib_1 = require("tslib");
const FormData = require("form-data");
class IssueAttachments {
    constructor(client) {
        this.client = client;
    }
    getAttachmentContent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/attachment/content/${parameters.id}`,
                method: 'GET',
                params: {
                    redirect: parameters.redirect,
                },
                responseType: 'arraybuffer',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAttachmentMeta(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/attachment/meta',
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAttachmentThumbnail(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/attachment/thumbnail/${parameters.id}`,
                method: 'GET',
                params: {
                    redirect: parameters.redirect,
                    fallbackToDefault: parameters.fallbackToDefault,
                    width: parameters.width,
                    height: parameters.height,
                },
                responseType: 'arraybuffer',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAttachment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/attachment/${parameters.id}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeAttachment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/attachment/${parameters.id}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    expandAttachmentForHumans(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/attachment/${parameters.id}/expand/human`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    expandAttachmentForMachines(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/attachment/${parameters.id}/expand/raw`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addAttachment(parameters, callback) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const formData = new FormData();
            const attachments = Array.isArray(parameters.attachment) ? parameters.attachment : [parameters.attachment];
            attachments.forEach(attachment => formData.append('file', attachment.file, attachment.filename));
            const config = {
                url: `/rest/api/2/issue/${parameters.issueIdOrKey}/attachments`,
                method: 'POST',
                headers: Object.assign({ 'X-Atlassian-Token': 'no-check', 'Content-Type': 'multipart/form-data' }, (_a = formData.getHeaders) === null || _a === void 0 ? void 0 : _a.call(formData)),
                data: formData,
                maxBodyLength: Infinity,
                maxContentLength: Infinity,
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssueAttachments = IssueAttachments;
//# sourceMappingURL=issueAttachments.js.map