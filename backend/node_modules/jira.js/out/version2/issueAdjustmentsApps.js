"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueAdjustmentsApps = void 0;
const tslib_1 = require("tslib");
class IssueAdjustmentsApps {
    constructor(client) {
        this.client = client;
    }
    getIssueAdjustments(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/issueAdjustments',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createIssueAdjustment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/issueAdjustments',
                method: 'POST',
                data: {
                    name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
                    description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
                    data: parameters === null || parameters === void 0 ? void 0 : parameters.data,
                    contexts: parameters === null || parameters === void 0 ? void 0 : parameters.contexts,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateIssueAdjustment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/issueAdjustments/${parameters.issueAdjustmentId}`,
                method: 'PUT',
                data: {
                    name: parameters.name,
                    description: parameters.description,
                    data: parameters.data,
                    contexts: parameters.contexts,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteIssueAdjustment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/issueAdjustments/${parameters.issueAdjustmentId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssueAdjustmentsApps = IssueAdjustmentsApps;
//# sourceMappingURL=issueAdjustmentsApps.js.map